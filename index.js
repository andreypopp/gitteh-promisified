// Generated by CoffeeScript 1.6.3
var defer, gitteh, promisify,
  __slice = [].slice;

gitteh = require('gitteh');

defer = require('kew').defer;

promisify = function(func) {
  return function() {
    var args, cb, promise, _i;
    args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];
    if (typeof cb === 'function') {
      args.push(cb);
      return func.call.apply(func, [this].concat(__slice.call(args)));
    } else {
      promise = defer();
      args.push(function(err, result) {
        if (err) {
          return promise.reject(err);
        } else {
          return promise.resolve(result);
        }
      });
      func.call.apply(func, [this].concat(__slice.call(args)));
      return promise;
    }
  };
};

gitteh.openRepository = promisify(gitteh.openRepository);

gitteh.initRepository = promisify(gitteh.initRepository);

gitteh.Blob.prototype.save = promisify(gitteh.Blob.prototype.save);

gitteh.Commit.prototype.save = promisify(gitteh.Commit.prototype.save);

gitteh.Commit.prototype.tree = promisify(gitteh.Commit.prototype.tree);

gitteh.Index.prototype.addEntry = promisify(gitteh.Index.prototype.addEntry);

gitteh.Index.prototype.findEntry = promisify(gitteh.Index.prototype.findEntry);

gitteh.Index.prototype.getEntry = promisify(gitteh.Index.prototype.getEntry);

gitteh.Index.prototype.write = promisify(gitteh.Index.prototype.write);

gitteh.Reference.prototype["delete"] = promisify(gitteh.Reference.prototype["delete"]);

gitteh.Reference.prototype.resolve = promisify(gitteh.Reference.prototype.resolve);

gitteh.Reference.prototype.rename = promisify(gitteh.Reference.prototype.rename);

gitteh.Reference.prototype.setTarget = promisify(gitteh.Reference.prototype.setTarget);

gitteh.Repository.prototype.reference = promisify(gitteh.Repository.prototype.reference);

gitteh.Repository.prototype.commit = promisify(gitteh.Repository.prototype.commit);

gitteh.Repository.prototype.blob = promisify(gitteh.Repository.prototype.blob);

gitteh.Repository.prototype.tree = promisify(gitteh.Repository.prototype.tree);

gitteh.Repository.prototype.createBlob = promisify(gitteh.Repository.prototype.createBlob);

gitteh.Repository.prototype.createCommit = promisify(gitteh.Repository.prototype.createCommit);

gitteh.Repository.prototype.createTag = promisify(gitteh.Repository.prototype.createTag);

gitteh.Repository.prototype.createTree = promisify(gitteh.Repository.prototype.createTree);

module.exports = gitteh;
